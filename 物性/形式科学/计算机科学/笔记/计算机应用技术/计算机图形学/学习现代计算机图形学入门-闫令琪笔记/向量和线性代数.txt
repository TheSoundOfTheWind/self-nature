向量：Miscellaneous Math
线性代数：Linear Algebra
光栅化 几何 光线追钟  动画

图形学依赖于：
基础数学：
线性代数
微积分
统计

物理基础：
光学和力学

杂项：
信号处理
数值分析

线性代数：
矩阵和矩阵的乘
矩阵和向量的乘

旋转，变速旋转

Vectors：向量 数学
         矢量 物理

A  ->  B
->
AB = B-A
向量最重要的两个属性：方向和长度
向量不关心开始的位置
  ->
||a	||向量的长度
         ^ ->  ->
单位向量 a=a/||a||

向量求和：
平行四边形法则
三角形法则

笛卡尔坐标系：

A = 几个x加几个y
     X
A = ( )	 
     Y
         T
转置 ： A  = (x,y)
||A|| = 开根号(x^2 + y^2)
一般图形学上，给一个向量，缺省的数字是一列数

图形学中向量用到最多的操作是点乘和叉乘

点乘(Dot Product) (找到两个向量的夹角)
->  ->     ->      ->
a . b  = ||a|| . ||b||.cosθ

       ->  ->
	   a . b
cosθ = -----------
         ->    ->
	   ||a||.||b||

	   ^ ^
cosθ = a.b

属性：
         ->  ->  ->  ->
交换律： a . b = b . a 

        ->   ->  ->   ->  ->  ->  ->
结合律: a . (b + c) = a . b + a . c

          -> ->  ->   ->     ->  ->
分配律:(k.a).b = a .(kb) = k(a . b)

在2D中：

->  ->       Xa     Xb
a . b    =  (  ) . (  ) = XaXb + YaYb
             Ya     Yb
		
在3D中：
		

->  ->  ->      Xa     Xb
a . b . c   =  (  ) . (  ) = XaXb + YaYb + ZaZb
                Ya     Yb	
                Za     Zb 				
                
				^
b projection = Ka
投影
      
	  ->
k = ||b||cosθ

点乘 = 0 垂直
点乘 > 0 方向接近   （反射，高光）
点乘 < 0 方向接近相反


叉乘（得到同时垂直于这两个向量的向量）：
右手螺旋定则
->    ->     ->
x  X  y   = +z

->    ->     ->
y  X  x   = -z

->    ->    ->
y  X  z   =+x

->    ->    ->
z  X  y   =-x

->    ->    ->
z  X  x   =+y

->    ->    ->
x  X  z   =-y

->  ->   ->  ->
a X b = -b X a

->  ->  ->
a x a = 0

-> ->  ->   ->  ->  ->  ->
aX(b + c) = a X b + a X c

->  ->     ->  ->
aX(kb) = k(a X b)

如果通过右手螺旋得出来的坐标是Z（不是负Z），那么就称这个坐标为右手坐标系

叉乘的计算：



              
->  ->          YaZb   -   YbZa
a X b     =    (ZaXb   -   XaZb)
                XaYb   -   YaXb
				

                0     -Za     Ya    Xb
a X b  = A*b = (Za    0       -Xa) (Yb)
                -Ya   Xa      0     Zb
				

判定左和右
判定里和外

通过叉积判断左和右：
 ->    ->
(a  X  b ) > 0 即b在a向量的左侧，要逆时针旋转
           < 0 即b在a向量的右侧，要顺时针旋转
		  
通过叉积判断点在向量的内部，三条边都在左边或右边
光栅化 三角形 着色 ，色素在三角形的内部

用向量定义坐标系：
  ->      ->      ->
||u|| = ||v|| = ||w|| = 1


u . v = v . w = u . w = 0

->  ->  ->
w = u X v (right-handed)

->   ->  ->->   ->  ->->   ->  ->->
p = (p . u)u + (p . v)v + (p . w)w
    (projection)

矩阵（几乎所有计算机的课都会涉及到矩阵）：
//-----------------------------------------------------------------------------
矩阵其实并不难，特别是应用在变换上。 移动，旋转、错切、缩放
在图形学里变换就是矩阵最大的应用。矩阵是什么呢，矩阵就是一堆数，几行几列
就是几乘几的矩阵。
矩阵中最用有用的操作就是矩阵的乘积。

#(number of) columns in A must = # rows in B
(M X N)(N X P) = (M X P)

 1  3   3 6 8 4       9  ?  33 13
(5  2) (       )  =  (19 44 61 26)  
 0  4   2 7 8 3       8  28 32 ?
  
比如这里26 所处的位置是第二行第四列，
那么就把第一个矩阵的第二行和第二个矩阵的第四列做一个点乘
5*4 + 2*3 = 26
同理第一个问号的值，一行二列做点乘= 1*6 + 3*7 = 28
第二个问号的值，三行四列= 0*4 + 4*3 = 12

矩阵的乘积有一个非常重要的性质：
没有任何的交换律：AB和BA大部分情况是不想等的

矩阵的结合律和分配律是满足的：
(AB)C = A(BC)
A(B+C)= AB + AC
(A+B)C = AC +BC 
 
一个矩阵如何和一个向量乘？
矩阵在左边向量在右边，然后向量永远都是一个列向量。
也就是说永远都是一个MX1这么一个矩阵。
怎么用矩阵实现变换呢？
比如：
2D 坐标关于Y轴对称的坐标
 -1   0  x     -x
(      )( ) = (  )
 0    1  y      y
 
矩阵的转置操作：

        T
 1    2         1   3   5
(3    4)    =  (         )
 5    6         2   4   6
 
属性：
    T      T  T
(AB)   =  B  A

单位矩阵的介绍：




          1  0  0
I3x3  =  (0  1  0)
          0  0  1
   -1     -1
AA     = A   A  = I

    -1    -1  -1
(AB)   = B   A

用矩阵来做点乘和叉乘：

点乘：
->  ->  ->T ->               Xb
a . b = a   b  = (Xa Ya Za) (Yb) = (XaXb + YaYb + ZaZb)
                             Zb
							 
叉乘：

->    ->            0  -Za    Ya   Xb
a  X  b    = A*b = (Za  0    -Xa) (Yb)
                   -Ya  Xa    0    Zb



		  


