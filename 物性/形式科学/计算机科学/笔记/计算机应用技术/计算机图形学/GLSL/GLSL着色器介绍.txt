GLSL着色器
使用GLSL的着色器(shader), GLSL是一门特殊的有着类似于C语言的语法, 在图形管道(graphic pipeline)中直
接可执行的OpenGL着色语言. 着色器有两种类型 -- 顶点着色器(Vertex Shader)和片段着色器(Fragment Shader)
. 前者是将形状转换到真实的3D绘制坐标中, 后者是计算最终渲染的颜色和其他属性用的.

GLSL不同于JavaScript, 它是强类型语言, 并且内置很多数学公式用于计算向量和矩阵. 快速编写着色器非常复杂,
 但创建一个简单的着色器并不难. 在这篇文章我们将介绍使用着色器的基础知识, 并且构建一个使用Three.js的例
 子来加速代码编写.

你可能记得基本原理那篇文章, 一个顶点(vertex)是在空间中有自己3D坐标的点, 并且通常包含些被定义的其他信
息. 空间本身会被坐标系统定义. 在那个3D空间中一切都是关于形状的呈现.

着色器类型
一个着色器实际上就是一个绘制东西到屏幕上的函数. 着色器运行在GPU中, 它对这些操作进行了很多的优化, 这样
你就可以卸载很多不必要的CPU, 然后集中处理能力去执行你自己的代码.

顶点着色器
顶点着色器操作3D空间的坐标并且每个顶点都会调用一次这个函数. 其目的是设置 gl_Position 变量 -- 这是一个
特殊的全局内置变量, 它是用来存储当前顶点的位置:
void main() {
	gl_Position = makeCalculationsToHaveCoordinates;
}
这个 void main() 函数是定义全局gl_Position 变量的标准方式. 所有在这个函数里面的代码都会被着色器执行. 
如果将3D空间中的位置投射到2D屏幕上这些信息都会保存在计算结果的变量中.

片段着色器
片段 (或者纹理) 着色器 在计算时定义了每像素的 RGBA 颜色 — 每个像素只调用一次片段着色器. 这个着色器的
作用是设置 gl_FragColor 变量, 也是一个GLSL内置变量:

void main() {
	gl_FragColor = makeCalculationsToHaveColor;
}
计算结果包含RGBA颜色信息.