sudo apt install freeglut3-dev

sudo apt install libxi-dev

sudo apt install libxmu-dev

sudo apt install libgl1-mesa-dev

sudo apt install libglu1-mesa-dev

sudo apt install libglut-dev

sudo apt install freeglut3-dev

sudo apt install libglew-dev

sudo apt install libsd12-dev

sudo apt install libsd12-image-dev

sudo apt install libglm-dev

sudo apt install libfreetype6-dev


安装glut方法：

1. sudo apt install build-essential
#安装opengl Library
2. sudo apt install libgl1-mesa-dev

#安装OpenGL Utilities(是一组构建于OpenGL Library之上的工具组，提供许多方便的函式，使OpenGL更强大且更容易使用)
3. sudo apt install libglu1-mesa-dev

#安装OpenGL Utility Tookit(OpenGL Utility Tookit是建立在OPenGL Utilities上面的工具箱，除了强化了OPenGL Utilities的不足之处，也增加了OPenGL对于视窗界面的支持)
4. sudo apt install libglut-dev
note：如果shell提示Unable to locate package libglut-dev
将命令改为 sudo apt install freeglut3-dev 即可

安装GLFW：
1. sudo apt-get install libglfw3-dev
2. git clone https://github.com/glfw/glfw
3. mkdir build && cd build && cmake ../glfw && make -j15 && sudo make install


glad、glew、glfw、Freeglut的区别
glew（The OpenGL Extension Wrangler Library）是对底层OpenGL接口的封装，可以让你的代码跨平台。glad与glew作用相同，可以看作它的升级版。Freeglut（OpenGL Utility Toolkit）主要用于创建OpenGL上下文、接收一些鼠标键盘事件等等。glfw（Graphics Library Framework）是Freeglut升级版，作用基本一样。通常来说glad和glfw配合使用，比如我上面发的那个网站就是。glew和Freeglut配合使用，比如OpenGL红宝书上面的例子

glfw: GLFW is a free, Open Source, multi-platform library for opening a window, creating an OpenGL context and managing input. It is easy to integrate into existing applications and does not lay claim to the main loop. GLFW is written in C and has native support for Windows, Mac OS X and many Unix-like systems using the X Window System, such as Linux and FreeBSD. GLFW is licensed under the zlib/libpng license.

glew: The OpenGL Extension Wrangler Library (GLEW) is a cross-platform open-source C/C++ extension loading library. GLEW provides efficient run-time mechanisms for determining which OpenGL extensions are supported on the target platform.

glut: The [Open]GL Utility Toolkit (GLUT) is a utility library for OpenGL applications to put the platform-dependent details (e.g. creating windows and responding to mouse events and key presses) under one hood, in an easy and portable way.

freeglut: freeglut is an open-source alternative to the OpenGL Utility Toolkit (GLUT) library.

glew：就是你要使用对老opengl的扩展，你要使用一些新的接口就要用这个！
glfw：类似于统一opengl的窗口，窗口管理与glut类似
glut：opengl的工具包，隐藏平台之间的差别与细节，提供提供统一的方法来处理事件，消息等
freeglut：替代品glut

GLM库：
OpenGL和DirextX不一样，没有内置的数学库，于是我们需要找一个第三方库，按照LearnOpenGL的教程我们使用GLM库

常用的函数

glm::radians() 角度制转弧度制
glm::translate() 创建一个平移矩阵，第一个参数是目标矩阵，第二个参数是平移的方向向量
glm::rotate() 创建一个将点绕某个轴旋转x弧度的旋转矩阵，第一个参数是弧度，第二个参数是旋转轴
glm::scale() 创建一个缩放矩阵，第一个参数是目标矩阵，第二个参数是缩放系数
创建裁剪矩阵的函数,位于glm/ext/matrix_clip_space.hpp，这个文件存放裁剪空间相关的API

glm::ortho(float left, float right, float bottom, float top, float zNear, float zFar); 前两个参数指定了平截头体的左右坐标，第三和第四参数指定了平截头体的底部和顶部。通过这四个参数我们定义了近平面和远平面的大小，然后第五和第六个参数则定义了近平面和远平面的距离。
glm::perspective(float fovy, float aspect, float zNear, float zFar); 第一个参数为视锥上下面之间的夹角，第二个参数为宽高比，即视窗的宽/高，第三第四个参数分别为近截面和远界面的深度
其实上面提到的大多数函数基本都是模板函数，只不过我们平时习惯用float的特化，为了测试GLM库，可以试一下简单的对一个点进行位移的操作

	glm::vec4 vec(1.0f, 0.0f, 0.0f, 1.0f);//创建一个点
	glm::mat4 trans = glm::mat4(1.0f);//创建单位矩阵
	trans = glm::translate(trans, glm::vec3(1.0, 1.0, 1.0));//设置平移矩阵
	vec = trans * vec;//变换矩阵左乘点向量，获得变换后的点
	cout << vec.x << vec.y << vec.z << endl;
	system("pause");

将一个点(1, 0, 0)移动(1, 1, 1)

OpenGL Mathematics (GLM) 是基于OpenGL着色语言（GLSL）规范的图形软件的头文件C ++数学库。

GLM提供的类和函数使用与GLSL相同的命名约定和功能设计和实现，因此任何知道GLSL的人都可以在C ++中使用GLM。

这个项目不限于GLSL的功能。基于GLSL扩展约定的扩展系统提供扩展能力：矩阵变换，四元数，数据打包，随机数，噪声等等。

这个库与OpenGL完美地工作，但它也确保与其他第三方库和SDK的互操作性。它是软件渲染（光线追踪/光栅化），图像处理，物理模拟和任何需要简单方便的数学库的开发上下文的良好候选。

GLM是用C ++ 98编写的，但是当编译器支持时可以利用C ++ 11。它是一个没有依赖的平台独立库，它正式支持以下编译器：

    ● 苹果Clang 6.0及更高版本
    ● GCC 4.7及以上
    ● 英特尔C ++ Composer XE 2013及更高版本
    ● LLVM 3.4及更高版本
    ● Visual C ++ 2013及更高版本
    ● CUDA 7.0及更高版本（实验版）
    ● 任何C ++ 11编译器


有关GLM的更多信息，请查看手册和API参考文档。 源代码和文档根据Happy Bunny License (Modified MIT)或MIT许可证授权。

感谢您通过提交错误报告和功能请求的问题为项目做出贡献。 欢迎任何反馈在glm@g-truc.net。



使用案例:


#include <glm/vec3.hpp> // glm::vec3
#include <glm/vec4.hpp> // glm::vec4
#include <glm/mat4x4.hpp> // glm::mat4
#include <glm/gtc/matrix_transform.hpp> // glm::translate, glm::rotate, glm::scale, glm::perspective
#include <glm/gtc/constants.hpp> // glm::pi
 
glm::mat4 camera(float Translate, glm::vec2 const & Rotate)
{
    glm::mat4 Projection = glm::perspective(glm::pi<float>() * 0.25f, 4.0f / 3.0f, 0.1f, 100.f);
    glm::mat4 View = glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, -Translate));
    View = glm::rotate(View, Rotate.y, glm::vec3(-1.0f, 0.0f, 0.0f));
    View = glm::rotate(View, Rotate.x, glm::vec3(0.0f, 1.0f, 0.0f));
    glm::mat4 Model = glm::scale(glm::mat4(1.0f), glm::vec3(0.5f));
    return Projection * View * Model;
}

GLSL介绍：
GLSL（OpenGL Shading Language） 全称 OpenGL 着色语言，是用来在 OpenGL 中着色编程的语言，
也即开发人员写的短小的自定义程序，他们是在图形卡的 GPU上执行的，代替了固定的渲染管线的一
部分，使渲染管线中不同层次具有可编程性。

GLSL 其使用 C 语言作为基础高阶着色语言，避免了使用汇编语言或硬件规格语言的复杂性。
OpenGL ES 的渲染管线包含有一个可编程的顶点阶段的一个可编程的片段阶段。其余的阶段则
有固定的功能，应用程序对其行为的控制非常有限。每个可编程阶段中编译单元的集合组成了
一个着色器。在OpenGL ES 2.0 中，每个着色器只支持一个编译单元。着色程序则是一整套编
译好并链接在一起的着色器的集合。着色器 shader 的编写需要使用着色语言 GL Shader 
Language（GLSL），GLSL 的语法与 C 语言很类似。

查看OpenGL版本 glxinfo | grep "OpenGL"