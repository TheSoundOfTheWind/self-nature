测试框架设计与开发
一、架构设计

1.测试开发和业务开发的区别
  1.业务开发
     1.用户：各色人群
     2.产品：
	   1.复杂度高
	   2.领域性知识
	   3.周期不固定
  2.测试开发
     1.用户：测试工程师
     2.产品：
	   1.业务解决方案：解决团队的问题
	       1.过程的规范性便利于自动化的实施
		   2.技术选型
	   2.工具：解决自己的问题

质量的铁三角：
组织 过程 人

2.自动化解决方案
  1.为什么要将方案？
    1.知识点，发挥作用：需要一根绳子，
	2.方案：一整套实施方法，技术、流程
  2.流程：
    1.为什么要设计测试框架：解决实际的测试相关的问题？
	  1.重复执行相同的用例，50%的用例基本要去用，不怎么变。
	  2.自动化测试的脚本的维护和复用
	  3.自动化时间消耗问题
	  4.自动化通用性问题
	2.做好产品经理：需求调研
	  1.调研日常的测试工作的流程
	  2.产品的特性：
	    1.长期性
		2.稳定性
	  3.公司的质量规范
	  4.最大痛点：
	3.技术选型
	  1.工具体系：jenkins，svn，git，rf，jmeter
	  2.语言体系：Python、jave
	  3.架构设计：
	    1.分层
		  1.持久层：数据在磁盘上的存放方式和处理方式，数据的格式或依照的规范
		      1.excel模板；
			  2.数据库：数据表的逻辑结构：数据表的字段、索引、主键、约束的设计
			  3.设计持久层使用的技术有哪些？
			      1.面向对象：抽象测试工作过程中的元素，形成单独的对象。把对象设计成表格，
				              属性设计为表的字段
				  2.建立对象与对象之间的关系；
		  2.业务层：领域相关的内容：
		      1.用例管理
			  2.测试计划
			  3.数据解析
			  4.测试执行（测试引擎）
			  5.数据采集
			  6.报告生成
		  3.用户界面
		      1.测试用例编写界面：
			      1.execl
				  2.navicat
				  3.web页面
				  4.配置文件
			  2.测试数据维护界面
			      1.html插件
				  2.allure
			  3.测试报告查看界面

分层设计思想
自动化测试框架设计开发
    1.GUI
	    1.编写GUI自动化测试的脚本  
	    2.编写GUI自动化测试用例
    2.接口
        1.编写接口测试脚本
        2.编写接口测试用例
    3.性能
        1.编写jemter脚本
        2.实现jemter参数化


概念摘抄
    1.项目：为了完成某项任务临时组织一个活动
	2.产品：为了实现某些特定业务而发明制造的成品。产品的生命周期是覆盖项目周期的
	    1.产品周期：需求调研 研发 测试 发布运营 退役
	3.DDT
    4.KDT
	    1.keyword drive test
		2.愿理：rep=object.action(value)
		    1.object:对象
			2.action：发生在对象上的或者对象自带的行为
			3.value：行为在发生的时候需要数据，input(),open,get
			4.resp:响应
			
	
分析    设计    实现    执行    维护


数据驱动测试(Data-Driven Testing,简称DDT)
关键字驱动测试(Keyword-Driven Testing,简称KDT)
业务流程测试(Business Process Tesing,简称BPT)
页面对象模式(Page Object Model,简称POM)
基于组件的测试(Component-Based Testing,简称CBT)
 
