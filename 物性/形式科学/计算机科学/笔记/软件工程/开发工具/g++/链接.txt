//链接相关的宏
//-----------------------------------------------------------------------------
LIBRARY_PATH:
是程序编译期间查找动态链接库时指定查找共享库的路径。
LD_LIBRARY_PATH:
是程序加载运行期间查找动态链接库时除了系统默认路径之外的路径
PATH:
是可执行文件的路径
//-----------------------------------------------------------------------------

//编译时需指定头文件和源文件（库文件）搜索路径、和库的名称
//-----------------------------------------------------------------------------
-I 指定头文件的搜索目录

-L 指定库文件的搜索目录 （编译链接去找的目录）
-L: “链接”的时候，去找的目录，也就是所有的 -lFOO 选项里的库，都会先从 -L
指定的目录去找，然后是默认的地方。编译时的-L选项并不影响环境变量
LD_LIBRARY_PATH，-L只是指定了程序编译连接时库的路径，并不影响程序执行时库
的路径，系统还是会到默认路径下查找该程序所需要的库，如果找不到，还是会报错，
类似cannot open shared object file。

-rpath-link：这个也是用于“链接”的时候的，
例如你显示指定的需要 FOO.so，但是 FOO.so 本身是需要 BAR.so 的，后者你并没有指定，
而是 FOO.so 引用到它，这个时候，会先从 -rpath-link 给的路径里找。-rpath: “运行”
的时候，去找的目录。运行的时候，要找 .so 文件，会从这个选项里指定的地方去找。
对于交叉编译，交叉编译链接器需已经配置 --with-sysroot 选项才能起作用。也就是说，
-rpath-link 则只用于链接时查找。

-Wl,rpath=   指定寻找依赖库的目录，并且隐式的链接那些动态库所需要的链接库
-rpath指定的路径会被记录在生成的可执行程序中，用于运行时查找需要加载的动态库。

-l 指定库的名称(-lname), 从右到左，所以最右边放最基础的库（运行链接时去找的目录）
//-----------------------------------------------------------------------------

//为什么会需要用到链接
做项目时除了要链接我们自己代码封装成的库，也要链接我们代码用到的第三方库
（静态库或动态库）
比如我自己我自己代码封装的库叫liba.so,其依赖的库叫libb.so和libc.so
那么编译的时候就要这样编：
gcc -o test test.c -I. -L. -la -lb -lc

//链接顺序
//-----------------------------------------------------------------------------
1.链接的顺序需要注意
注意：链接是从右往左，所以越基础的库放在越后面，如以上例子-lc就是最基础的库
所以将它放在最后，让它优先被链接器链接，这样就不会出现因链接顺序导致的
"undefine reference to"的error，例如
2.出现两个库之间或多个库直接相互的交叉的彼此链接
这个时候正确的顺序链接就无从谈起，需要用到参数，告诉链接器忽略库之间的链接
顺序进行链接
例如：”libdbManager.h:56: undefined reference to 'dbManager:s_dbCommands'"
-L库的路径 -Wl,--start-group -ldb -lci -lge -lpl -lio -Wl,--end-group 

-Wl,--start-group 和 -Wl,--end-group 之间的链接会忽略他们之间的链接顺序，
这个在不明白它们链接的优先顺序或出现彼此相互链接的库时这个参数，非常有用
//-----------------------------------------------------------------------------

// -Wl,rpath=  命令介绍
//-----------------------------------------------------------------------------
//功能
1.程序链接时，在rpath指定的目录中，隐式的链接那些动态库所需要的链接库
2.程序运行时，优先到rpath指定的目录去寻找依赖库

//使用场景
场景1：
如果我将我的code打包成liba.so库给其他开发人员使用，但其他的开发人员又不想
显式链接liba.so所依赖的库（通过-L -l 这两个命名显式链接），它们只想显式
链接它们直接用到的库，至于直接用到的库的所用到的库（间接用到的库，例如
libb.so、libc.so），就可以放到-Wl,rpath= 指定的目录中。这样就省略了-L指定
放libb.so、libc.so库的目录，和-lb、-lc这些编译项
场景2：
程序打包是往往会把间接用到的库放在-Wl,rpath= 的目录中，这样链接可以省略好多个
-l参数，而且rpath是固化到代码中的，我们可以配合宏和相对路径的使用准确的找到
和Binary一起打包给客户的第三方库。例如：-Wl,-rpath,'$$ORIGIN/../lib/lib'
这里为什么要使用两个$$

// 官方解释
man ld，查找链接选项rpath的含义:

 -rpath dir
  Add  a  directory to the runtime library search path.  This is used 
  when linking an ELF executable with shared objects.  All -rpath arguments 
  are concatenated and passed to the  runtime  linker,  which  uses them 
  to locate shared objects at runtime.  The -rpath option is also used when
  locating shared objects which are needed by shared objects explicitly  
  included  in  the  link;  see  the  description  of  the -rpath-link 
  option.  If -rpath is not used when linking an ELF executable, the contents
  of the environ-ment variable "LD_RUN_PATH" will be used if it is defined.

简单翻译下, rpath链接选项主要有两个功能：
（1）程序运行时，优先到rpath指定的目录去寻找依赖库
（2）程序链接时，在指定的目录中，隐式的链接那些动态库所需要的链接库。
第二个功能帮我们解决了场景1的需求，只链接直接需要的库，不想链接间接
需要的库。

我们将libb.so 和 libc.so拷贝的同一个目录中，
然后利用rpath链接应用程序，这样编译便不需要显示的去链接liba.so所依赖的库了。
copy到当前目录：
eg：
gcc -o test test.c -I. -L. -la -Wl,-rpath=.

copy到test_d目录：
eg：gcc -I ~/test_d -I. -la -Wl,rpath=/home/hljin/test_d test.c
//-----------------------------------------------------------------------------
 
//库的头文件的搜索路径
//-----------------------------------------------------------------------------
#include "headfile.h"
搜索顺序为：
1.先搜索当前目录
2.-I 指定的目录
3.gcc的环境变量CPLUS_INCLUDE_PATH（C程序使用的是C_INCLUDE_PATH）
4.最后搜索gcc的内定目录/usr/include /usr/local/include 
                       /usr/lib/gcc/x86_64-redhat-linux/4.1.1/include

#include <headfile.h>
1.-I 指定的目录
2.gcc的环境变量CPLUS_INCLUDE_PATH（C程序使用的是C_INCLUDE_PATH）
3.gcc的内定目录/usr/include /usr/local/include 
               /usr/lib/gcc/x86_64-redhat-linux/4.1.1/include

//内定目录
在安装g++时，指定prefix，那么内定的搜索目录就是：
Prefix/include
Prefix/local/include
Prefix/lib/gcc/--host/--version/include
编译时可以通过-nostdingc++选项屏蔽对内定目录搜索头文件

注：各目录存在相同的文件时，先找到哪个使用哪个。
//-----------------------------------------------------------------------------

//静态库或动态库编译链接时库的搜索路径顺序 
//-----------------------------------------------------------------------------
1.ld会去找GCC命令中的参数-L
2.再找gcc的环境变量LIBRARY_PATH
3.再找内定目录 /lib /usr/lib /usr/local/lib 
  这是当初compile gcc时写在程序内的  
//-----------------------------------------------------------------------------

//动态库运行链接时搜索路径顺序: 
//-----------------------------------------------------------------------------
1. 编译目标代码时指定的动态库搜索路径；-Wl，-rpath=./
 （当指定多个动态库搜索路径时，路径之间用冒号":"分隔）
2.环境变量LD_LIBRARY_PATH指定的动态库搜索路径
3.配置文件/etc/ld.so.conf中指定的动态库搜索路径
4.默认的动态库搜索路径/lib 
5.默认的动态库搜索路径/usr/lib 
注：动态库链接是在运行时执行。动态库的搜索路径并不包含当前文件夹，
    所以即使当可执行文件和其所需的so文件在同一个文件夹，也会出现找不到so的问题，
    类同于#include <header_file>不搜当前目录。
小知识：动态库的链接是在运行时指定的。
//-----------------------------------------------------------------------------


//编译链接和运行链接分开的好处
现代连接器在处理动态库时将链接时路径（Link-time path）和运行时路径（Run-time path）
分开,用户可以通过-L指定连接时库的路径，通过-R（或-rpath）指定程序运行时库的路径，
大大提高了库应用的灵活性。比如我们做嵌入式移植时#arm-linux-gcc $(CFLAGS) –o 
target –L/work/lib/zlib/ -llibz-1.2.3 (work/lib/zlib下是交叉编译好的zlib库)，
将target编译好后我们只要把zlib库拷贝到开发板的系统默认路径下即可。或者通过
-rpath（或-R ）、LD_LIBRARY_PATH指定查找路径。


在gcc中使用ld链接选项时，需要在选项前面加上前缀-Wl(是字母l，不是1）
，以区别不是编译器的选项
//-----------------------------------------------------------------------------
	




