1.依赖
依赖是use-a的关系，A use-a B，就是类A使用了另一个类B。这种关系具有偶然性，临时性，也非常的弱，但是，类B的变化会影响到类A。
1）B类是A类方法当中的一个参数；
2）B类是A类中的（某中方法的）局部变量；
3）B类向A类发送消息，从而影响A类发生变化；

2.关联
关联是has-a的关系，A has-a B，就是类A包含了另一个类B，但类B由可以独立存在。这种关系必依赖
要密切，不偶然，也不临时。入订单类和商品类。

3.聚合
聚合是has-a的关系，A has-a B，聚合关系是关联关系的特例，在关联的基础上多了整体和部分的关系，
例如Family和Child，Company和Staff，B的销毁或生命周期结束，不会破坏A的生命
周期或完整性，聚合时比一般的关联更关系更强。

4.组合
组合是has-a的关系，A has-a B，组合关系是一种特殊的聚合关系，也表示的是一种整体和部分的关系，
但是A不能脱离B独立存在，或者说B的销毁或生命周期结束会破坏A的整体性。比如人和心脏，
鸟和翅膀。人没有心脏不能独立存活，鸟没有翅膀也不能独立存活。A和B的生命周期是同步的。

5.继承和实现（泛化）
泛化是is-a的关系，B is-a A，A类是接口或父类，B实现或继承A，B实际上包含A中的所有属性和方法。

耦合程度1 - 2 - 3 - 4 - 5依次递增，

总结：
继承和实现式纵向的，1 2 3 4 是横向的。

自我体会：关联越弱他们之间的沟通或信息的传递越需要一个共识性的接口、协议、语言
架起两个个体之间的信息桥梁。一个好的接口、协议、或者语言可以准确无误的传达信息，
如何定义准确和好，就看接口本身的词法和语法、语义是否足够的清晰，人类的语言就是
一种复杂的接口，人与人之间交流的接口。人与人合作可以完成任何理论上可以完成的复杂
工程，这就是合作分工的魅力。每个人都擅长不同的事情，分工也有不同，他们之间的交流
就是通过一个可扩展性的接口来进行，对象处理数据产生的数据属于对象内部，处理之后得
到的结果需要转化成接口的能够支持的格式给到下一个处理对象。所以在定义一个对象的时候
就要明确的定义这个对象的分工，和这个对象的输入和输出，对象的分工就是这个对象所要
完成的任务，完成一个任务势必要自己的数据结构和用于完成本任务的数据结构。
输入数据就是通过该对象能够支持的接口获取在他处理任务时所需要的数据，输出数据就是
将处理结果的数据转成下一个对象能够理解的接口或协议。

关联越强，证明他们之间的分工越趋于一致，或者是为了同一个小目标服务，是一个更小的
合作单位。关联越强的对象的声明周期越是趋于一致，最终可能强到共存亡的层次。就好比
建造一栋高楼，需要设计及师、建筑师、工地各种器械的操作员等等工种的配合才能完成。
所以完成一个工程需要设计好各种工种，然后去应用这个工种完成任务。

工程的设计：
如果用人来完成，我们怎么分工才合理，分工之后各工种内部如果很好的完成他们的工作
。这就是我们类的设计原则，和模块的设计技巧。

例如： 用户 -- 需求 -- 设计师 -- 设计图纸和理念 -- 建筑师 -- 建筑方案 -- 建筑工人 -- 高楼
          对象    结果     对象       结果                   对象        结果          对象           结果
                    数据                  数据                                 数据                           数据
每个对象产生的输出数据就是下一个对象的输入数据。
