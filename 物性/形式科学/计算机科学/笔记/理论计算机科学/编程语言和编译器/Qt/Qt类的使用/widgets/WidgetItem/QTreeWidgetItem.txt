//QTreeWidgetItem 
//-----------------------------------------------------------------------------
The QTreeWidgetItem class provides an item for use with the QTreeWidget 
convenience class. 
Header:	#include <QTreeWidgetItem>

Public Types:
enum	ChildIndicatorPolicy { ShowIndicator, DontShowIndicator, DontShowIndicatorWhenChildless }
enum	ItemType { Type, UserType }

Public Functions:
QTreeWidgetItem(const QTreeWidgetItem &other)
QTreeWidgetItem(QTreeWidgetItem *parent, QTreeWidgetItem *preceding, int type = Type)
QTreeWidgetItem(QTreeWidgetItem *parent, const QStringList &strings, int type = Type)
QTreeWidgetItem(QTreeWidgetItem *parent, int type = Type)
QTreeWidgetItem(QTreeWidget *parent, QTreeWidgetItem *preceding, int type = Type)
QTreeWidgetItem(QTreeWidget *parent, const QStringList &strings, int type = Type)
QTreeWidgetItem(QTreeWidget *parent, int type = Type)
QTreeWidgetItem(const QStringList &strings, int type = Type)
QTreeWidgetItem(int type = Type)
QTreeWidgetItem &	operator=(const QTreeWidgetItem &other)
virtual									~QTreeWidgetItem()
void									addChild(QTreeWidgetItem *child)
void									addChildren(const QList<QTreeWidgetItem *> &children)
QBrush									background(int column) const
Qt::CheckState							checkState(int column) const
QTreeWidgetItem *						child(int index) const
int										childCount() const
QTreeWidgetItem::ChildIndicatorPolicy	childIndicatorPolicy() const
virtual QTreeWidgetItem *				clone() const
int										columnCount() const
virtual QVariant						data(int column, int role) const
Qt::ItemFlags							flags() const
QFont	font(int column) const
QBrush	foreground(int column) const
QIcon	icon(int column) const
int		indexOfChild(QTreeWidgetItem *child) const
void	insertChild(int index, QTreeWidgetItem *child)
void	insertChildren(int index, const QList<QTreeWidgetItem *> &children)
bool	isDisabled() const
bool	isExpanded() const
bool	isFirstColumnSpanned() const
bool	isHidden() const
bool	isSelected() const
QTreeWidgetItem *	parent() const
virtual void		read(QDataStream &in)
void				removeChild(QTreeWidgetItem *child)
void				setBackground(int column, const QBrush &brush)
void				setCheckState(int column, Qt::CheckState state)
void				setChildIndicatorPolicy(QTreeWidgetItem::ChildIndicatorPolicy policy)
virtual void		setData(int column, int role, const QVariant &value)
void	setDisabled(bool disabled)
void	setExpanded(bool expand)
void	setFirstColumnSpanned(bool span)
void	setFlags(Qt::ItemFlags flags)
void	setFont(int column, const QFont &font)
void	setForeground(int column, const QBrush &brush)
void	setHidden(bool hide)
void	setIcon(int column, const QIcon &icon)
void	setSelected(bool select)
void	setSizeHint(int column, const QSize &size)
void	setStatusTip(int column, const QString &statusTip)
void	setText(int column, const QString &text)
void	setTextAlignment(int column, int alignment)
void	setToolTip(int column, const QString &toolTip)
void	setWhatsThis(int column, const QString &whatsThis)
QSize	sizeHint(int column) const
void	sortChildren(int column, Qt::SortOrder order)
QString	statusTip(int column) const
QTreeWidgetItem *			takeChild(int index)
QList<QTreeWidgetItem *>	takeChildren()
QString						text(int column) const
int							textAlignment(int column) const
QString						toolTip(int column) const
QTreeWidget *				treeWidget() const
int							type() const
QString						whatsThis(int column) const
virtual void				write(QDataStream &out) const
virtual bool				operator<(const QTreeWidgetItem &other) const

Protected Functions:
void	emitDataChanged()

Related Non-Members:
QDataStream &	operator<<(QDataStream &out, const QTreeWidgetItem &item)
QDataStream &	operator>>(QDataStream &in, QTreeWidgetItem &item)

Detailed Description:
//-----------------------------------------------------------------------------
Tree widget items are used to hold rows of information for tree widgets. Rows 
usually contain several columns of data, each of which can contain a text label
and an icon.

The QTreeWidgetItem class is a convenience class that replaces the QListViewItem
class in Qt 3. It provides an item for use with the QTreeWidget class.

Items are usually constructed with a parent that is either a QTreeWidget 
(for top-level items) or a QTreeWidgetItem (for items on lower levels of the tree)
. For example, the following code constructs a top-level item to represent cities
of the world, and adds a entry for Oslo as a child item:

    QTreeWidgetItem *cities = new QTreeWidgetItem(treeWidget);
    cities->setText(0, tr("Cities"));
    QTreeWidgetItem *osloItem = new QTreeWidgetItem(cities);
    osloItem->setText(0, tr("Oslo"));
    osloItem->setText(1, tr("Yes"));
Items can be added in a particular order by specifying the item they follow when 
they are constructed:

    QTreeWidgetItem *planets = new QTreeWidgetItem(treeWidget, cities);
    planets->setText(0, tr("Planets"));
Each column in an item can have its own background brush which is set with the 
setBackground() function. The current background brush can be found with background().
The text label for each column can be rendered with its own font and brush. These are
specified with the setFont() and setForeground() functions, and read with font()
and foreground().

The main difference between top-level items and those in lower levels of the tree is
that a top-level item has no parent(). This information can be used to tell the 
difference between items, and is useful to know when inserting and removing items
from the tree. Children of an item can be removed with takeChild() and inserted at
a given index in the list of children with the insertChild() function.

By default, items are enabled, selectable, checkable, and can be the source of a drag
and drop operation. Each item's flags can be changed by calling setFlags() with the
appropriate value (see Qt::ItemFlags). Checkable items can be checked and unchecked
with the setCheckState() function. The corresponding checkState() function 
whether the item is currently checked.

Subclassing
When subclassing QTreeWidgetItem to provide custom items, it is possible to define new
types for them so that they can be distinguished from standard items. The constructors
for subclasses that require this feature need to call the base class constructor with
a new type value equal to or greater than UserType.