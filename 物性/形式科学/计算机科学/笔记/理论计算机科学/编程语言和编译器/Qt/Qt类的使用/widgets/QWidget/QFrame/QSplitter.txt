Header:	#include <QSplitter>
qmake:	QT += widgets
Inherits:	QFrame

Properties:
childrenCollapsible : bool
handleWidth : int
opaqueResize : bool
orientation : Qt::Orientation

Public Functions:
QSplitter(Qt::Orientation orientation, QWidget *parent = nullptr)
QSplitter(QWidget *parent = nullptr)
virtual	~QSplitter()
void	addWidget(QWidget *widget)
bool	childrenCollapsible() const
int	count() const
void	getRange(int index, int *min, int *max) const
QSplitterHandle *	handle(int index) const
int	handleWidth() const
int	indexOf(QWidget *widget) const
void	insertWidget(int index, QWidget *widget)
bool	isCollapsible(int index) const
bool	opaqueResize() const
Qt::Orientation	orientation() const
void	refresh()
QWidget *	replaceWidget(int index, QWidget *widget)
bool	restoreState(const QByteArray &state)
QByteArray	saveState() const
void	setChildrenCollapsible(bool)
void	setCollapsible(int index, bool collapse)
void	setHandleWidth(int)
void	setOpaqueResize(bool opaque = true)
void	setOrientation(Qt::Orientation)
void	setSizes(const QList<int> &list)
void	setStretchFactor(int index, int stretch)
QList<int>	sizes() const
QWidget *	widget(int index) const

Reimplemented Public Functions:
virtual QSize	minimumSizeHint() const override
virtual QSize	sizeHint() const override

Signals:
void	splitterMoved(int pos, int index)
Protected Functions
int	closestLegalPosition(int pos, int index)
virtual QSplitterHandle *	createHandle()
void	moveSplitter(int pos, int index)
void	setRubberBand(int pos)

Reimplemented Protected Functions:
virtual void	changeEvent(QEvent *ev) override
virtual void	childEvent(QChildEvent *c) override
virtual bool	event(QEvent *e) override
virtual void	resizeEvent(QResizeEvent *) override