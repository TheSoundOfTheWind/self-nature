//QVector3D
//-----------------------------------------------------------------------------
The QVector3D class represents a vector or vertex in 3D space. 

Header:	#include <QVector3D>

Public Functions:
QVector3D(const QVector4D &vector)
QVector3D(const QVector2D &vector, float zpos)
QVector3D(const QVector2D &vector)
QVector3D(const QPointF &point)
QVector3D(const QPoint &point)
QVector3D(float xpos, float ypos, float zpos)
QVector3D()
float	distanceToLine(const QVector3D &point, const QVector3D &direction) const
float	distanceToPlane(const QVector3D &plane, const QVector3D &normal) const
float	distanceToPlane(const QVector3D &plane1, const QVector3D &plane2, const QVector3D &plane3) const
float	distanceToPoint(const QVector3D &point) const
bool	isNull() const
float	length() const
float	lengthSquared() const
void	normalize()
QVector3D	normalized() const
QVector3D	project(const QMatrix4x4 &modelView, const QMatrix4x4 &projection, const QRect &viewport) const
void		setX(float x)
void		setY(float y)
void		setZ(float z)
QPoint		toPoint() const
QPointF		toPointF() const
QVector2D	toVector2D() const
QVector4D	toVector4D() const
QVector3D	unproject(const QMatrix4x4 &modelView, const QMatrix4x4 &projection, const QRect &viewport) const
float	x() const
float	y() const
float	z() const
QVariant	operator QVariant() const
QVector3D &	operator*=(float factor)
QVector3D &	operator*=(const QVector3D &vector)
QVector3D &	operator+=(const QVector3D &vector)
QVector3D &	operator-=(const QVector3D &vector)
QVector3D &	operator/=(float divisor)
QVector3D &	operator/=(const QVector3D &vector)
float &		operator[](int i)
float		operator[](int i) const

Static Public Members:
QVector3D	crossProduct(const QVector3D &v1, const QVector3D &v2)
float		dotProduct(const QVector3D &v1, const QVector3D &v2)
QVector3D	normal(const QVector3D &v1, const QVector3D &v2)
QVector3D	normal(const QVector3D &v1, const QVector3D &v2, const QVector3D &v3)

Related Non-Members:
bool			qFuzzyCompare(const QVector3D &v1, const QVector3D &v2)
bool			operator!=(const QVector3D &v1, const QVector3D &v2)
const QVector3D	operator*(float factor, const QVector3D &vector)
const QVector3D	operator*(const QVector3D &vector, float factor)
const QVector3D	operator*(const QVector3D &v1, const QVector3D &v2)
const QVector3D	operator+(const QVector3D &v1, const QVector3D &v2)
const QVector3D	operator-(const QVector3D &v1, const QVector3D &v2)
const QVector3D	operator-(const QVector3D &vector)
const QVector3D	operator/(const QVector3D &vector, float divisor)
const QVector3D	operator/(const QVector3D &vector, const QVector3D &divisor)
QDataStream &	operator<<(QDataStream &stream, const QVector3D &vector)
bool			operator==(const QVector3D &v1, const QVector3D &v2)
QDataStream &	operator>>(QDataStream &stream, QVector3D &vector)

Detailed Description:
//-----------------------------------------------------------------------------
Vectors are one of the main building blocks of 3D representation and drawing. 
They consist of three coordinates, traditionally called x, y, and z.

The QVector3D class can also be used to represent vertices in 3D space. We 
therefore do not need to provide a separate vertex class.