function
//------------------------------------------------------------------------------
fflush

function declaration:
//------------------------------------------------------------------------------
int fflush ( FILE * stream );

Flush stream
//------------------------------------------------------------------------------
If the given stream was open for writing (or if it was open
for updating and the last i/o operation was an output
operation) any unwritten data in its output buffer is written
to the file.

If stream is a null pointer, all such streams are flushed.

In all other cases, the behavior depends on the specific
library implementation. In some implementations, flushing
a stream open for reading causes its input buffer to be
cleared (but this is not portable expected behavior).

The stream remains open after this call.

When a file is closed, either because of a call to fclose
or because the program terminates, all the buffers
associated with it are automatically flushed.

Parameters
//------------------------------------------------------------------------------
stream
Pointer to a FILE object that specifies a buffered stream.

Return Value
//------------------------------------------------------------------------------
A zero value indicates success.
If an error occurs, EOF is returned and the error indicator
is set (see ferror).

Example
//------------------------------------------------------------------------------
In files open for update (i.e., open for both reading and writing)
, the stream shall be flushed after an output operation before
performing an input operation. This can be done either by
repositioning (fseek, fsetpos, rewind) or by calling explicitly
fflush, like in this example:
/* fflush example */
#include <stdio.h>
char mybuffer[80];
int main()
{
   FILE * pFile;
   pFile = fopen ("example.txt","r+");
   if (pFile == NULL) perror ("Error opening file");
   else {
     fputs ("test",pFile);
     fflush (pFile);    // flushing or repositioning required
     fgets (mybuffer,80,pFile);
     puts (mybuffer);
     fclose (pFile);
     return 0;
  }
}
