  所想即所得，所想即所为。填鸭式的是老师或上级想教你什么你才能学习到什么，除老师教的
什么之外的东西任何东西都学不到。等于一个无穷大的面，老师给你画了一个五角星，你学习
的东西就是五角星面积里的东西，五角星之外的东西你一概不知也不愿意自己去思考学习五角星
面积之外的东西。这样自己的学习的东西形成不了系统的概念，基础也是全部由老师决定。把自己
能力的成长全部交给了leader和老师，自己只是被动装东西的容器。如果老师或leader不让你做
锻炼能力的事情，自己也不去刻意的找东西学习更深层次的东西，那么自己做的永远就是公司让
你做的浅显的东西。人一开始都是停留知识的表层的，自己不去挖掘没人愿意带你去深层，再好
的老师也不会，你自己停留在表层，那他就安排表层的东西给你，你做一辈子的表层。

  自己应该尝试去做的足够深，深到一个很细致的程度，目前业务也好还是技术也好的极限才是
一个工程师的最基本的目标。尝试学习各种业务知识和技术知识让自己的项目变得更好，性能，代码的
优美程度等，进步都是很难有止境的。而不是公司的feature是什么样我就做成什么样，不去想着
做一些feature之外的优化，那么就很难获得成长。应该是做好feature，通过把feature做到极致的学习之路
让自己获得成长，任何feature的开发都是不完美的，都是目前的最优方案，但不是最长远的最优方案，
不是能让他本可以变得更好的最优方案。都是择中。但是如果都是择中，择到最后还是会停留在表层，
必须每一个点都是尝试用自己极限的能力把它做好，这样自己的边界才能不断的拓宽拓深。

一有空就是用自己觉得最好的方案去开发自己的feature，开发完又会发现不好，接着找思路又去
找一个更好的方案，为了这个更好的方案我又要去学习更多的新的东西，这样一个迭代的过程，
就是一个飞速进步的过程。

任何一个产品，代码，任何东西都有它不完美的地方，人都能使他变得更好，但是人都是从众，
不用心的缺点。这里需要极致的主动性，寻找一切能够让他变好的方法。这里的一切方法，就是一切
知识。新方法来自于新知识。要不断的接触学习新的东西。不去学习，自己能让一段代码变好几乎是
不可能的，学习的越主动付出的精力越多代码自然就越好。

把项目的推进依赖于任何除自己之外的个人或团队都是不负责任的行为，任何一件事你觉得会对你
的学习或工作有所帮助就应该自己去做。比如我有一个优化的方案，但是这个方案依赖于某个人的工作
那么这件事几乎不可能完成，既然是你提出的优化方案，就应该自己极力的负责，把一切推进的问题
障碍放到自己的面前，然后一个个去解决。