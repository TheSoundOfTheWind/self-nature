  不要给自己的未来和心灵套上枷锁，你无所不能只要你心力足够，功不唐捐
  不畏浮云遮望眼，只缘身在最高层。：掌握了正确的观点和思想方法，就能透过现象看到本质，不会被一时的假象所迷惑。

                                财富自由
                    工作  W    资产净值 A     投资  I
    		        A  = （A + W）* （1+I）
		    W = 理论知识      +      实践经验
		    I = 理论知识      +      实践经验
		    理论知识 = 数据结构+算法
		    实践经验 = 白天的工作或应用
		    理论知识+实践经验 = 注意力 + 精力
		    注意力 = 需要明确的目标感和方向感 = 因果
		    精力   = 好的身体

我的人生的初衷是什么，工作挣钱吗，这个不究竟，没有意义。
事业规划：学习打基础（软件、硬件）
          做核心形成核心竞争力,某个技术点还是某个业务点方面的知识都可以做到公司top，那么你在这个点上在公司就具有竞争力
          核心的竞争力在公司在市里在省里在国家在世界的排名决定和这个核心竞争力在世界的重要性决定了我在世界所获得的回报

任何一款软件产品都可以拆分成两块{业务逻辑（图纸，设计，为什么这样设计，学习业务业务知识可以了解为什么这样设计），技术栈（用到了哪些工具,这些工具的掌握程度，应用的巧妙程度，技术的选用，采用等）
}

从业务上可以拆分成若干个分类：
{
  power
  timing
  extraction	
}

从技术上可以拆分成若干个分类：
{
  C++语法的掌握程度，优美程度
  makefile	
  设计模式
  代码结构
  数据结构的选用
  算法的选用
}

拿到一个软件，你可以从它的业务线和技术线开始整理，抽丝剥茧，整理其结构和用到具体的业务知识和技术知识，任何一个软件你把他用到业务知识和技术知识都梳理出来后剩下的就是细致的学习工作：
业务：业务逻辑是否完备，清晰，是否混乱还是调理清晰，你对业务逻辑的理解程度决定了你是否发现业务逻辑是否有漏洞的概率。
  一个产品，你接手后就应该开始用思维导图，逻辑图，各种软件工程中的图来对其业务知识和处理逻辑进行梳理。脑子永远没有设计图纸来的可靠。

技术：实现同一个目标该技术是否是最有选项，如果决定采用该技术，我们应用的是否优雅，结构是否合理，code的性能是否可以进一步提升。
  一个产品，你接手后就应该开始用思维导图，逻辑图，各种软件工程中的图来对代码模块分工，模块之间的接口，每个模块中用到的复杂的数据结构和算法进行梳理，从大框架到框架中每个模块的具体的技术难点，难点找到后对难点画各种软件图纸，把这个软件的技术解剖的彻彻底底，任何一个人从这个解剖出来的步骤和图纸都可以还原回产品，就证明软件结构和知识点解剖的很彻底。
                                                        
                                            有用的{   好的： 阳光、周围环境
						  {   坏的： 风雨
                                    |
                                 |    |
                               |        |
	                     |             | --叶子
                           |                 |
                         |                    |
                       |        实践应用        |
		      |                           |
                    |	@      	@ --果实            |
                   |				     |
                    |		|	|	    |
                     |	        |	|	   |
                      |		|	|	 |
		       |	|	|      |
		        |	|	|     |
                                |       |     
                                |       |
                                |       |
				|	|
				|应用理论|
				|	|
				|	|
				|	|
				|	|
				|	|
------------------------------	|	|  ----------------------------
			       |	 |
			      |           |
			     |  基础理论   | -- 土壤或气候生态，全球环境

不管是业务能力的成长还是技术能力的成长都可以看成是这么一棵树的成长

理论水平的高度决定了整棵树的高度决定了一个人业务能力或技术能力的上限，
实践应用能力的经验（叶子和果实）决定了一个人业务或技术能力的下限

叶子是某个知识点的小练习，当你的树干想要长大了一分就要长出对应数量的小叶子。因为没有叶子从自然中吸收阳光提供物质支撑，树干的增大无从谈起。当树干彻底长成叶子可以选择枯黄脱落。
果实是物质回报，或者可以使用的产品或小玩意，如果一味的最求果实，大部分的营养都被果实拿走，树干的长高就会被拖累，就好像果树都长不大或长得慢一样，乔木长的高长得快一样。果树一年一收获，乔木十年一收获。高大的乔木因为丰富的理论知识一般被用作房梁栋梁，水果虽然不停收获确是消费品，就像前端一样，简单的业务永远做不完。无休无止。

理论是前辈或专业人士根据自己对某件事物理解或经验撰写的书籍，有系统的也有零散的。

叶子 --- 主干之间的循环：如果不能从实践中找出或者认识到自己哪块理论知识的不足，那实践并不能真正促进自己的成长，只有在实践的过程中去有意识的去发现自己哪方面理论知识的不足并集中时间把注意力放在理论水平的提升上，待理论水平提升到达了一个更高的高度，实践中又发现新理论知识的不足，以此循环。就好比你想要一个做到一个核心岗（果实）在你孕育这颗果实中你会发现自己缺乏各种让这颗果实变得饱满甘甜的各种营养成分，要补齐这些缺乏的营养需要更粗的树干更高的树干和更茂密的树叶。有很多时候你在实践过程中不知道如何改进，或者将其内部的工作原理梳理清晰，那么你就是缺乏理论的充实。在冰山中，理论就是海平面以下，实践出来的成果就是海平面以上。很多时候你个人感觉这一块内容做的不够好，但不知道具体该怎么让它变得更好，如何让它变好相关的领域的知识就是你需要学习的。


树干的高度和粗细决定了他获得阳光多少，和面对的风险的多少？越高越粗得到的阳光越多但面临风雨的越多。直到它高出整片森林，那他就是这个森林的达者，是比他矮小的植被的保护者。

1. leetcode 刷题

#职场是体育场，你得主动锻炼自己才能获得成长
//-----------------------------------------------------------------------------
职场是一个不进则退的游戏，你没有一个目标想在工作中获得像样的成长，你往往什么
都得不到。
靠着混资历在职场中往上走是最蠢的做法，你得有自己的学习目标，然后不断的往前走，
你没有目标公司给你分配什么你就做什么往往你什么也做不了都是做的一些边边脚脚的
工作，只有自己的清晰的目标，然后你会发现工作中所有的事好像都在锻炼你，让你更
好的实现你得目标。
你想要一个刚好能不断促使你进步的工作，我只能说没有，赶着你进步的工作不叫好工作
，好工作是你工作的东西知识栈足够深，你可以不断锻炼你学习到的新东西。
当你定了一个目标，并不断的向他发起冲锋，你会发现全世界都在用各种磨砺，打磨的你
让你离你的目标更接近。

所有这些都是方法，那你的目标是什么。我想想，我的目标是日日新，乘着每天晚上有时间
用自己的学习方法，学习，看书将那些善缘转化为资产。

职业方向的选择：拥抱开源，成也开源，败也开源
哪个行业开源的资源越多，哪个行业越能孕育人才，很多时候一个行业之所以
难以出一个大才只是这个行业太闭塞了，相关的材料和实践太少了根本没法支撑
一个人后期的成长和学习。这样自己想空闲实践锻炼自己也找不到合适的素材。

其实自己很喜欢一个新兴的有大量开源项目的工作，这样有足够的纵深锻炼自己
，自己最想锻炼的就是自己的数据结构和算法，回过头这自己三年来在这核心
方面的成长非常的缺乏或者说几乎没有成长，一个核心的要素就是自己没有主动去
学习他们，没有学习和初步的掌握，你怎么能在工作中把他们用起来呢。