3.在软件世界里从来不缺实现他的人，缺的是提供想法和思维逻辑的人。所有有关软件的公司，亚马逊，苹果，特斯拉，阿里，他们的核心竞争力从来不是实现，而是实现的图纸和方案。核心的是算法和算法逻辑。业务重要还是技术重要，只能说技术只是一种手段，业务才是核心竞争力。不管什么公司本质都是一家解决方案提供商，我有这样的需求或者你的服务给我带来更多的便利。什么是业务就是我这一套流程，一套算法下来就能帮你解决你的问题。如果一个复杂的软件它的核心的业务逻辑和其中的算法都了然于胸。你可以随时复制它。一开始可能会在软件性能上受影响但至少出来了，有了一个东西。就好比一个机床，技术越好机床的精度越高，可以加工更复杂更庞大的设计。而技术背后的理论，设计，为什么这样做，一整套的处理逻辑，为什么这么处理，背后的数学支撑是什么。这个才是核心，只要有一定技术基础就可以做出有用的东西出来。机床负责在生产线上重复性的劳动，只是针对不同的设计进行微调，从而做出不同的产品。而背后的设计团队里的设计方案，和通过理论设计出符合需求的设计图纸才是核心。真正能独挡一面的是业务和技术都了解才能承担住一款产品，才能造出一款产品。以后碰到任何一款产品都要着重了解他的业务知识，了解它的业务逻辑，处理所及即用到的算法和背后的所有理论支撑性的东西。你就能把我他的一整个脉络，对他的实现不去关心，因为你已经把他的核心脉络，基因，灵魂复制到了自己的脑子里。这个才是最关键的。不要被他其中的技术迷惑了，这些总是小道。技术在好也是那些，技术一般都是不太变的，都是走在最后的，越是稳定的技术越是远远走在后面的。或许这里不应该用技术或业务来区分两者，而应该用理论设计师和工人来区分，越是好的理论设计师越是拥有庞大的理论知识，来丰富它的设计来支撑他做出更好的设计。越是好的工人越是能完美的实现一个设计，能让一个设计接近他的设计极限和理论极限。一个产品要想向前发展一个服务质量要想向前发展就得在设计上优化在理论上优化在实际的核心算法上优化。毕竟一个软件就好比衣服中军用和民用的区别，设计一样，造出来却质量不一样，但都能穿。衣服都是那几年，过几年都要换设计。质量没那么好没关系。大家都冲者设计去的，而不是质量的如何如何牢靠。
/**********************************************************************************************************************/
                                   在技术和业务中保持平衡 2020-02-09
如果时间退回到十多年以前，新兴互联网公司的技术人员几乎都是从「业务开发」开始自己的职业生涯的。然而到了今天，不知道你有没有发现，业务开发和纯技术的开发已经有了明显的分野。

最开始，互联网业务的出现，让人们第一次从用户需求和用户体验的角度来设计产品。正是这种与传统生意的不同，造就了很多互联网早期的传奇故事。而互联网公司的技术人员，作为这些用户产品的真正实现者，他们的目标就是用技术来解决产品实现问题。也就是说，代码是直接服务于产品需求的（典型的业务开发）。在这个过程中，技术人员逢山开路，遇水架桥，遇到什么样的技术问题就解决什么样的技术问题。遇到存储问题，他们就调试和扩容数据库；遇到系统问题，他们就升级系统软件，做基本的运维工作；遇到架构问题，他们就设计技术架构，直接支撑业务。总之，对业务逻辑的开发和对技术问题的解决，这两件事是很难分开的。

正是在这样的业务驱动的过程中，丰富的公用组件、技术体系或框架被设计出来，并逐渐从业务中抽离。搜索引擎产品，将信息检索(Information Retrieval)技术的工程化推向了前所未有的高度；社交网络对于信息流的需求，催生了基于写扩散和读扩散的整套信息流分发的技术架构（也包括存储架构）；随着移动互联网的兴起，前后端分离的技术比以往走得更远，同时也出现了众多以客户端边缘计算为核心的专业编程技术。

在这样的大背景下，绝大多数能从业务中剥离的技术，都已经形成了开源项目。从MVC基础编程框架，到各种分布式数据库技术，到微服务调用和异步消息队列，再到大数据处理的整个技术栈，开源世界已经应有尽有，且不止一种选择。如今，新成立的创业公司，面对新的业务需求，技术人员在技术选型上的空间已经相当丰富，基本可以像搭积木一样把产品搭建出来。技术人员可以把更多精力放在业务开发上，从而大大提高了产品迭代的效率。但是，随着业务的做大，技术团队肯定也会不断碰到一些「纯技术问题」的困扰，需要对某些底层技术架构更专业的人员才能解决。于是，有一定规模的公司，或者基于开源项目进行二次开发，或者自研自己的底层架构，希望在长远的业务竞争中跑得更持久。

为了下文讨论清晰，我们将这些负责开发和维护底层技术架构的技术人员，称为「专业技术开发」人员；而将主要精力放在业务逻辑开发上的技术人员，称为「业务开发」人员。

各自的要求
在有些时候，「业务开发」和「专业技术开发」之间的区分并不是那么明显，特别是在一些初创的公司内部。这两类技术人员，他们都需要和业务人员（产品经理、运营人员、市场人员等）打交道。毕竟，所有的技术需求，源头都是来源于业务层面，两者只是「度」上的区别。对于一些刚进入职场的技术同学来说，他们甚至很难意识到自己的工作到底属于哪一类。但是，无论如何，你需要审视一下自己当前的工作，并结合自己的技术特点，看一下到底偏向哪一个方面。这关系到长远的规划。

我们先看一下对这两种开发人员各自的要求是怎样的。

先说「专业技术开发」，技术上的要求主要在于深度上，要能层层进阶，逐步逼近技术的本质。不同的阶段就犹如孤独求败的三柄长剑。

第一柄剑，乃是利剑，「凌厉刚猛，无坚不摧」。就好比一个初入职场，踌躇满志的年轻人，浑身充满斗志且技术精湛。他面对再复杂的系统，都能像一柄「利剑」一样，刺开迷雾，抽丝剥茧，深入到背后的原理。仅仅「会用」，远不是他的目标。

第二柄剑，是重剑，所谓「重剑无锋，大巧不工」。就好比一个资深的架构师，不仅深谙现有系统和框架的特性，也同样知晓它们的优点和缺陷，更能够凭借一己之力设计出更好的系统。种种繁复的技术细节，都是表象；再庞大的系统，也尽在掌握之中。花哨的技巧，早就不是他追求的目标。

第三柄剑，却是一柄木剑。到了这个阶段，已经达到了「不滞于物，草木竹石均可为剑」的状态。在他眼里，众多不同的上层技术，不同的开发语言，不同的技术栈，在底层都能看到相同的技术本质。本来繁杂的各路技术思想逐步归一，并对它们之间可能产生的融合与变化了然于胸。

再看一下「业务开发」人员。他们的工作不像前一种那么单纯，而是需要面对整个世界的复杂度。对这一类技术人员的要求，除了技术本身之外，还需看重两点：一个是要有业务Sense；另一个是要对业务数据敏感。

所谓业务Sense，又要从两方面来看：用户价值和商业价值。首先，他应该对创造更好的用户体验兴趣浓厚，他能够从用户的视角看待问题，有一定的「共情」能力。他应该对于产品所带来的用户价值有自己的判断，而不仅仅是被动接收产品经理的需求。其次，他应该对商业模式有一定的认识。他知道以LTV(用户的终身价值)和CAC(用户获取成本)为基础的产品标尺；他能认识到，一个好的产品必须在市场、产品、渠道、模型这四者之间达到契合。

所谓业务数据敏感，首先，他应该很明确地了解到业务的数据目标是什么，并能够清醒地意识到这个目标是整个团队的事情，而不仅仅是产品经理或运营人员的KPI。其次，他应该知道这个业务目标如何拆解到技术层面，能意识到技术事项和数据指标之间的逻辑关系。更进一步，他可能还需要对事物之间真实的因果关系有一定的分析能力，能够推断出哪一些产品或技术的改动可能对数据指标产生影响，并能够对如何通过AB实验来探索改进产品有系统的思维方法；他对于数据敏感，知道所维护的产品在AARRR整个用户生命周期（拉新、激活、留存、推荐、变现）上的特点，并能推断出哪些行为可能会对各个漏斗的转化率产生影响。

有些读者会说，这看起来更像是对业务人员的要求，而不是对技术人员的要求。但「业务开发」人员的工作，每天都与业务紧密相关，所以业务人员的思维方式他也需要有所了解。当然，最后还有最重要的一项要求——技术本身。一位「业务开发」人员，他应该知道什么样的产品方案适合用怎样的技术方案来支撑，这是最基本的要求。除此之外，他还应该提前做好技术布局，为业务的未来发展扫清障碍；同时，他能清醒地计算ROI(投入产出比)，用较小的技术投入换取最大的业务价值。没错，「业务开发」最终就是这样，领着程序员的工资，操着CEO的心。

总之，对比一下「专业技术开发」和「业务开发」：前一种是专才，追求大道至简；后一种是全才，讲究学识渊博，包罗万象。

各自的困境
社会分工本质上是生产力发展的结果。就像我们在前面分析的一样，「专业技术开发」和「业务开发」这两种技术人员，是从互联网业务的不断繁荣中逐渐分化出来的。首先，分化意味着专业化；但在某种程度上说，也意味着「无趣」。早期初创企业中那种“光着膀子听着歌，一边盯着用户反馈，一边直接修改线上产品”的粗放的快乐时刻，现在的技术人员很难体会到了。粗放的做法被专业化的方案所替代，技术的「上古田园时期」已经一去不复返了。

专业化分工对于技术人员的成长所带来的影响是深远的。我们就来看一下这两种技术人员在成长过程中各自可能碰到的困境。对于两者来说，这些困境有些相同，有些不同。

首先第一点，他们都会遭遇到成长的边际效用递减法则。边际效用递减法则，本来是一个经济学概念，通俗地解释就是，对于同样的一件事情，开始投入的时候，收益值很高，越到后来，同样的投入量能换取的收益值就越少。大到国家和企业，小到一个团队和个人，这个原则都适用。

具体到技术人员的成长上来说，对于「业务开发」，最开始进入一个业务领域的时候，也是成长最快的时候。他通常要在短时间内掌握很多专业的「领域知识」，这个过程就好像一块干海绵一下子吸满了水。等到他能够娴熟地驾驭这些「领域知识」之后，业务逻辑的开发就变成了枯燥的、重复性的工作。而对于「专业技术开发」来说，这个过程发生在技术深度的拓展上。一个技术精湛的、像一柄「利剑」一样的技术同学，他能够在短时间内摸清一个底层架构的百分之八十，这个过程也是他最有收获的过程。但当他能够应付大部分技术需求的时候，变化也变得越来越少，他会感觉到翻来覆去还是那么些东西；而在技术深度上要想再深入一层，也是千难万难。

第二点是业务价值和技术亮点的冲突。对于「业务开发」来说，技术亮点通常很难提炼。他每天可能会花费90%的时间都在做业务逻辑的开发，但「业务逻辑开发」这件事情本身却不一定能体现出技术亮点。他需要不断地去概括、去抽象，去挖掘业务背后更深层的技术问题。而对于「专业技术开发」来说，则经常面临重复造轮子的风险。由于底层架构的复用性通常都比较强，他需要考虑所造的「轮子」对于业务的独特价值到底是什么，到底有没有必要性，到底是不是技术的自high。

最后，「业务开发」会更多地受到业务兴衰的影响。业务经常面临着试错风险，业务由盛转衰，或者自始至终就没有成功过，不管哪一种情况，最后的结果都是大部分写过的代码被抛到一边，一切从头开始。「专业技术开发」当然也会受到影响，但影响程度会小一点。

寻找平衡点
随着业务的繁荣和技术的发展，整个知识库变得愈发庞大了，而人的精力有限。既关注技术，又关注业务，经常让人力不从心。所以需要寻找平衡点。

这个平衡点，对于不同的人不一样，对于不同的具体职位，也不一样。

这就好比金庸小说中逍遥派里的人物，苏星河除了跟无崖子学武功之外，还学琴、学弈、学书法、学绘画，结果耽误了武学，最后败给了丁春秋。而另一个武学人物——黄药师，就平衡地很好，不但奇门遁甲、琴棋书画、天文地理都有涉猎，而且武功卓绝，属于宗师的级别，还能自创出「落英神剑掌」之类的武功来。当然，金庸小说中也有成功的「专才」，比如乔峰，比如郭靖，都堪称「战神」级别。

所以说，每个人都有适合自己的策略。有些人喜欢心无旁骛，持续钻研，始终如一；有些人则比较爱折腾，喜欢经常换个领域，比如专业技术干久了，就换到业务方向尝试，或者反过来。

不过有一个现实的情况可能需要考虑，对于「专业技术开发」和「业务开发」，社会的职位需求量肯定是后者比前者多得多。这个也很好理解，业务是公司的核心，业务也发展变化更快。所以通常情况下，技术人员比较理想的状态是「一专多能」。首先能够精通某一个专业领域的技术（由于精力有限，能够精通一个专业领域已经非常不错了），比如搜索技术，比如推荐技术，比如分布式架构，然后还能对业务有所了解，能够从业务的视角去思考问题。

在「专业技术开发」和「业务开发」两者之中，不存在哪个更好、哪个更坏的问题；如何把握两者之间的「度」和平衡点，也没有一个绝对的答案。但不管是偏向哪一个方向，重要的是搞清自己当前的现状和未来的定位，以及从「现在」到「未来」的路线是什么。

平衡点对每个人都不一样，而且对同一个人的不同时期来说，也是一个动态的平衡。持续关注新的领域，给自己找到下个阶段应该了解和深入研究的领域（技术领域或业务领域），才是不断成长的关键。在不断成长的动态的过程中，你才有机会总结出一套结构化的思维方式，甚至逐渐走出常规，开拓不一样的人生。

总之，时间有限，不要浪费太多。因为，青春很快就会逝去。


************************************************************************************************************************
今天我们就从以下几个方面聊聊这个话题：

什么是业务
业务和技术的关系
业务和因解决业务而衍生的业务
对业务的态度因你在团队中的角色而不同
如何从写业务代码中跳出来，做你所谓的有技术含量的工作
首先，我们先来看看，什么是业务。



1. 什么是业务
简单讲，“业务”就是需要处理的各种事务，但通常偏向指客户实际作业涉及的事务，“业务”最终的目的是完成工作所做的所有事务。

比如取款就是一种业务，ATM 机内运转的软件，要解决的业务就是取款。

比如挂号、预约、查检查报告，都是业务，趣医网的 App 就可以用来解决这些业务。

比如买火车票也是业务，12306 这个网站就是为解决买车票的业务服务的。



2. 业务和技术的关系
软件是用来解决现实世界中的业务给人们的工作带来便利的。

比如到火车站买票，要坐车、提前、排队，又麻烦又消耗时间又浪费精力，而 12306 网站和 App ，通过把买火车票这种现实业务虚拟化，为人们省去了奔波、排队、耗时的麻烦。

比如大家都想到好医院看病，人人都想挂专家号，很多人为了挂到某个医生的号，通宵排队，非常辛苦，而现在的各种网上挂号网站、微信公众号、 App 。

通过软件技术手段，把专家大夫这种资源虚拟化，让大家随时随地能挂号，还不用到医院、不用通宵憋尿排队、不用担心被医托和黄牛忽悠，给患者带来了极大便利。

软件是现实业务虚拟化的载体，技术最终是为了解决业务问题的。从这个角度讲，所有的开发者，其工作最终都是指向某个特定业务问题的。没有业务，技术的存在就没有意义。技术不能解决实际问题，不能给人们带来便利，就没有价值。

但从另一方面来讲，技术是现实业务虚拟化的必要条件，没有技术，现实中的业务就无法被虚拟化。而且，同一种技术又可以实现多种业务的虚拟化。

所以，很多初阶的开发者才会有种“错觉”：技术牛 X ，因为没有技术就无法实现业务，业务很 Low ，技术牛 X 了，随随便便就能搞定。

实际上，这些感觉虽然在一定阶段有其道理，但并不是真理哦。

关于业务和技术的关系，这里下个结论：

技术是为了解决业务问题的，只有在实现业务、给人们带来便利的前提下，技术的存在才有意义，所以，多数时候，是业务决定技术、业务统领技术。
没有技术，业务就无法被虚拟化，生产效率就很难有效提升
业务和技术具有相互促进、相互依存的关系。
我们回到开发者身上来看，写业务代码多一些，还是所谓的技术代码多一些，没有高下之分，只有个人取向和组织分工的不同。



3. 业务和因解决业务而衍生的
很多开发者会用割裂的眼光来看待业务和技术，比如把增删改查（CRUD）看作是无意义的业务代码，把实现 libuv 或 Redis 这样的框架看作是有技术含量的事情。

比如京东上《程序员的成长课》这本书的详情页，是这样的：




它对应的架构是这样的：




很多开发者会觉得，写那些用来展示《程序员的成长课》的图书封面、优惠券、促销等相关信息的代码是没什么技术含量的，因为那些是业务代码。

他们会觉得，写商品详情页架构中的 Redis、JMQ 或 JIMDB 是有技术含量的，是真正的技术代码。

但实际上，所谓的业务代码和技术代码，它们的区别，仅仅是和业务的距离远近不同而已：业务代码离业务更近，技术代码离业务稍远。它们最终都是指向业务实现的。

而且，你换一种视角来看业务，就会发现，其实每一层代码，都服务于它的上一层代码，上一层代码，就是它的业务！

比如详情页架构的第2层“对外提供API”中的商品介绍个 API ，它的服务对象，就是前端页面，要解决的业务，就是“响应前端页面的查询，提供商品介绍”

而第2层底部的前端数据集群（JIMDB），它的服务对象，就是商品介绍，要解决的业务，就是“存储商品或代理商品介绍信息”。

简单说，每一层技术实现，都服务于上一层，都以上一层的需求为业务。从这个角度讲，现实中的业务在被虚拟化的过程中，会在技术实现层面引发分层，产生中间性、对用户不可见的新业务。

从这个广义业务的视角来看，每一层代码，都是业务代码！

但是为什么很多开发者又觉得所做的技术实现越接近现实业务越没技术含量呢？

这是因为，你越接近用户业务：

细节越多，繁琐度越高，越不容易做好，越容易因为一点小瑕疵而被否定，让人觉得自己的劳动没价值
现实性越强，变化几率越高，越容易来回修改代码，越让人觉得自己的掌控感低下
实现的代码可迁移性越差，劳动成果被复用的概率越低
而当你远离用户业务时：

你用到的技术，多数都是被高度抽象过的、用来解决从用户业务衍生出的技术性业务的，它们比具体的用户业务稳定，它们的适用面更广，也更容易被迁移到其它的业务领域
你的劳动成果因为具有抽象属性，被复用的概率会更高，你会更愿意打磨它，会更有成就感
你受到压力，经过距离用户近的几层同事的传递，得到了衰减，没那么大
你打交道的对象，多数时候是内部同事、是技术人群，更容易达成一致


4. 对业务的态度因你在团队中的角色而不同
你对业务的态度，会因你在团队中承担的角色不同而不同。这是由开发团队的组织结构和职责分工导致的。

下面是我绘制的“团队结构、能力与职责”图：








在一个开发团队中，架构师这个角色，会负责业务拆分和软件架构的工作，并且领导团队来实现满足业务的软件。

注1 ：有的研发团队里有业务架构师和软件架构师两种角色，业务拆分由业务架构师或业务分析师完成。
注2 ：软件架构师和业务架构师这两个角色也可能由没有架构师头衔的研发经理兼任。
架构师一定是要以业务为导向的，要搞懂业务的。所以，在架构师这个阶段，在团队管理者这个阶段，业务的重要性，往往是高于技术的，在他们的眼中，业务统领技术，技术是用来实现业务的。

当团队完成业务架构和软件架构之后，就会选择不同的开发者来负责不同功能模块的实现。

负责不同功能模块实现的开发者，必须能够理解业务，并且要熟悉某个技术栈，能够进行模块设计和任务拆分，我称这样的开发者为“熟练开发者”。

熟练开发者会承接由架构师分派的子业务，负责模块设计和拆分，把拆分后的小任务，交给普通程序员来完成。

当你是一个熟练开发者时，业务和技术几乎同等重要，因为：

你不理解业务，就很难将子业务模块映射到软件实现上，也很难做进一步的业务拆分。
你不具备完整的技术栈和相应的知识体系，就很难找到合适的技术来实现业务，也很难做软件模块的拆分。
熟练开发者完成了子业务和软件模块的拆分，会形成一系列的叶子型任务，并把它们分派给具备特定专项技术能力的普通程序员。

普通程序员要做的事情比较简单，就是接受别人分派的任务，实现特定的业务细节。

注意当你是一个普通程序员的时候，团队要求你具备一定的专项技术能力，能够完成任务即可，你的角色，就拿把螺丝刀拧螺丝，拧好螺丝就 Ok 。

这个时候，你内心是痛苦的，对不停地写业务代码是拒绝的，因为你要再找工作时，别的组织看重你的专项技术能力甚于业务能力（他们有人做业务拆分，你过去了能拧螺丝即可），而你在现有组织中，却因为深陷业务代码的编写而无法持续淬炼你的技能能力。

所以普通程序员最纠结写业务代码这件事！

那么，该如何才能解脱呢？



5. 如何从写业务代码中跳出来
孔子说过一段话：“弟子入则孝，出则悌，谨而信，泛爱众而亲仁，行有余力，则以学文。”

翻译成现代文，是这个意思：“年轻人，在家就要孝顺父母，出门在外就要尊敬兄长，行为谨慎，言语有信，博爱众人，亲近仁者。这样都做到之后还有余力的话，就可以去学习从政，做更大的事业。”

这段话呢，给普通程序员指明了方向：轻松搞定你的业务代码，还有余力，就可以做更重要的事情。

也就是说，当下你能力不够，组织上不可能给你更复杂的模块让你负责（再说团队里已经有更厉害的人在做那些事了），你得先轻松且漂亮地搞定手上的任务再说。

很多普通程序员天天抱怨老写业务代码没长进，可手上的任务却总是敷衍了事，完成得凑凑合合，那是很难摆重复简单业务任务的泥沼的。

那怎样才能做到轻松、漂亮地搞定任务呢？ 4 点：

在深度和广度两个方面提升技术能力（如果当下任务繁重，就利用业余时间练习）
把自己的做的事情放在全局理解，提升业务理解能力
培养好的工作习惯，比如计划、回顾等
做好汇报和展示，让领导知道你的能力
当你慢慢做了上面 4 点之后，每次拿到任务，都能轻松又漂亮地搞定，超出领导的预期，还有未发挥完的火力，那团队就一定会给你复杂一点的任务。

如果你还能轻松、漂亮地搞定并且还有余力，那团队就会给你复杂度再高一些的任务……

往复循环，你就可以跳出最简单的业务代码编写，做越来越重要的事情，人也变得越来越重要。



6. 小结
前面我们分 5 个部分阐述了业务和技术的关系，总结一下，关键的其实有 3 点：

1. 技术是手段，业务是目的；软件开发工作是以业务为导向的，但是没有技术又无法实现业务。

2. 业务和技术的关系，随着开发者角色的变化而变化。

刚入行时作为普通程序员，技术是基础，有技术才能实现业务，公司在招人时也以技术水平为门槛，从这点出发，一定要在短期内迅速提升技术。
工作了 3 、 5 年，成了熟练开发者，可以独自负责一个业务模块时，需要更好地理解业务，这样才能更好的从技术上实现，此时业务和技术并重。
从熟练开发者往前发展，有两条路，技术专家和架构师，如果你选择架构师的路线，则应该调整思维，以业务为导向，把业务放在更重要的位置，因为架构是从业务拆分出来的，如果你选择技术专家路线，则需要在深耕技术的同时保持对业务的敏感。
3. 普通程序员要想从业务代码的泥沼中跳出，要从技术水平、做事的方法、习惯和自我展示几方面入手，努力做到搞定任务有余力，进入正向循环，慢慢获得做重要事情的机会，让自己变得重要.

/**********************************************************************************************************************/
技术成长与业务卖命的抉择————论程序员的“瓶颈”问题
在IT行业打拼多年，身边的同事也是走走停停，一些人因为追求技术而不断跳槽，而一些人一直在一家公司至今已经成为了团队的Leader。作为一名工程师的你，对于时间，你更愿意花在学习新技术上，还是花在实现产品需求上呢？

progress

内容提要
两类人的分析
技术还是业务？
你缺乏什么
两类人的分析
进入IT行业已经多年，从刚实习做Delphi，到后来扎根C，一直在现在专心做移动技术，前前后后也换了3家公司了。相信你和我一样，也换了数加公司，然而有一点我相信你和我更为共鸣的一点：身边的同事一个个的离自己而去，也有一些新同事加入你的团队，人海茫茫何去何从。这里我们关注下那些离职的同事，他们的离职原因除了薪资以外，说的最多的可能是两句话：

"这家公司技术没增长了，自己学不到东西了，我要换个公司"
“天天做业务做功能烦死了，哪有时间自己学东西，到最后过了几年啥都没学到”
相信你可能也是这两类人之一，你是一个技术狂人，但是苦于自己遇到了瓶颈，一会学一下这个框架，一会学一下那个框架，感觉没啥你学不会的了。或者你们团队的做的软件功能太多，每天都在做功能，实现需求，而你天天抱怨自己没有时间学技术，大量的业务需求挤压了自己的成长时间。

技术还是业务？
我认为技术是无限的，你不可能把IT行业，即使是你所感兴趣的那一类目给学透。想想当初学习IT是为了什么，为了钱？还是为了实现一些价值。我认为你学习的技术很大程度是为了解决实际的问题。今天学这个框架，明天学那个平台，都是最后你都只是看了文章，撸个demo，但是实际你的项目却根本用不到，不能落地，都是自己在玩，我认为这是无用的。
很多工程师往往把技术和业务给隔离开来，或者说自己带有私心：

“我多学点技术，以后跳槽好跳”
“天天做功能，到下家公司都用不到，没时间学技术就是废人一个”
看起来技术热情很高，一直研究各种新技术，但总是忽视对公司与团队业务的贡献，学习到的东西也不能落地，这有点本末倒置，我们应该首先关注于公司团队业务，更多思考如何以技术的角度，给业务做出更多贡献。产品才是最终目的，一个优秀的产品背后一定有非凡的技术支撑；而一个技术牛人，不一定能做出一个优秀的产品。

我记得有一个当初我待过的第一家公司的一个同事，当年也是应届生。他这么多年，一直都待在那家公司，坐着同样的时间。如今他已经是管理二十多人的一个小团队Leader了，对他来说，业务和管理都更为重要。

同时，我也有几个以前认识的同事，他们看起来很热衷于“学习技术”，但是总是对现在公司不满，认为实现功能占用了他们太多学习技术的时间，不自由，于是不断的跳槽，至今依然还是游荡所在公司的最底层，撸代码。

那么到底技术和实现业务哪个更重要？
我个人的观点是，一半的时间学习技术，一半的时间实现功能业务。相铺相成。用你实际的项目来验证你所学到的东西。

你缺乏什么
我认为最终这个行业人才的走向都是两个

项目经理 -> 管理者
技术专家 -> 技术缔造者
我认为一个好的管理者他应该是做技术起家的，他本身就是一个经验老道的工程师。只不过如今，他把更多的时间花在了业务上。我们学习更多的技术，不是为了一味的花时间去学习技术抵制实现业务功能，而是为了能够带领这个团队，能够做出完美的产品。当你的目标是这个，而你觉得自己已经到了成长瓶颈的时候，不妨想一想自己对于市场、运营、销售是否了解，能够带领一个团队。

如果你是个geek精神的工程师，对技术无限狂热，觉得自己技术到了瓶颈又一直想深入下去的，不妨看看自己是否能独立写个框架或者工具，而不是仅仅会“用”github上的别的成果。与此同时，你是否能将自己的技术推广开来，做一个真正的专家。当你觉得自己每天都在看技术博客、文章的时候，静下心来想一想，自己是否真的也能实现一下，而不仅仅是会用而已。就像百威最近的广告语 慢能成事.

/********************************************************************************************************************/


身处 IT 行业中，我们经常在工作中听到“业务”和“技术”这两个词。如果一样东西或事物太常见，我们往往会关注其表象而忽视本质的思考，就像只有牛顿受苹果落地的现象启发进而发现万有引力。

没有理解“业务”和“技术”的本质，我们在实际的工作中就会出现种种不必要的困惑和误解。例如：

业务架构如何落地到技术架构？

是技术驱动业务还是技术服务业务？

技术和业务，哪个更重要？

首先，我们回到对业务和技术的定义：

业务，是指某种有目的的工作或工作项目

技术，是指人类对机器、硬件或人造器皿的运用，也包含更广的架构，如系统、组织方法学和技巧

——维基百科

从中我们可以发现业务具有强目的性，是为特定问题而生的；而技术具有弱目的性、普遍性和通用性。

业务与技术的关系
接下来我们以卖书为例，来看互联网时代是怎样构建卖书的新渠道以及发现新业务的，技术在其间扮演着什么角色。


在没有互联网的年代，卖书需要通过线下的手段，即书店卖书的方式来进行销售。有了网络之后，通过电子商务的方式，卖书通过线上的呈现和线下的物流就可以让用户足不出户享受到购书的乐趣，这也是亚马逊在初期所做的事情。在这个阶段，卖书是一种核心业务，而电子商务网站的构建（例如：Linux + Apache + Mysql + PHP）就是技术。

随着网站规模越大，亚马逊发现电商网站可以做成一个平台，接入其他的商家，让大家共享渠道一起卖书。在这个时候，电商平台就成了一种业务，而分层架构、分布式、权限分配、Open API 等就是技术。

后来，随着平台和数据中心的壮大，亚马逊发现可以利用富余的软硬件资源来提供数据存储服务，给第三方网站使用。这时候，提供云存储就是业务，而其中业务实现用到的虚拟化、云计算等解决方案就是技术。

通过上述例子可以看出，技术和业务其实是一个相对的概念，业务隶属于问题域，技术隶属于解决方案域。通过不同的场景和视角转换，技术也会演变成一项业务。

据此，我们可以回答开篇提出的三个问题：

先想清楚我们的需求和问题，然后再来寻找合适的技术解决方案，这就是一个方案落地的过程；

技术最初是为业务服务，但是随着技术的发展，技术本身也可以作为一项业务提供出去，以此来驱动业务增长；

技术和业务是相辅相成、相互转化的，没有孰轻孰重，只有在不同场景下的运用。

启示
通过对业务和技术的思考，我们从不同的群体中也能得到一些启示：

1）技术工作者

一方面要认识到技术只是用来解决特定问题的工具，所以一定要从问题出发，提出解决方案，而不能一味的追求技术的完美。

另一方面，也要认识到技术本身也可能成为一项业务，只要它足够通用，能够给其他人、组织提供有价值的解决方案。

2）业务人员

同一个问题往往有着多种的解决方式，每种方式背后都会有技术作为支撑。作为业务人员需要保持敏锐的眼光，了解新的技术，借此来提出更好的解决方案。

3）企业经营

传统产业和信息产业都在经历着持续的转型和信息化改造。意识到技术和业务的相对性，企业经营者能够开阔思路，以技术的视角来审视企业的业务，创新商业模式，为业务扩展创造更多的机会。

尤其是在互联网企业，所有的业务都是构建在庞大的技术基础设施之上。如果互联网企业将这种技术能力进行整合和开放，它所能提供的价值将远远超过服务于企业内部业务所带来的价值。因此，以技术为驱动作为互联网企业的一项发展战略是很自然的事情。
/*********************************************************************************************************************/
程序员懂业务有多重要？印象中我从来都说，“很重要” 这句没有营养的废话。在许多项目中，业务才是真正驱使价值兑现（冠冕堂皇的说法，基本上意思就是 “赚钱”）的法宝，而技术实际上有诸多选择，选择某一项并无太大区别。可是，老实说，下意识地，在技术和业务难以两全其美的时候，我还是倾向于选择那些从技术角度更有趣，但是业务上显得没 “那么” 重要的项目。我不讳认这一点，但是随着这些年的经验积累，或者说经历的项目的洗礼，业务的分量已经越来越大了。

在华为的时候，我做过一些杂七杂八的项目，其中最大的一个项目是一个大型的电信门户网站，由于我参与的是基线版本的研发，定制业务少，变态需求少，扩展性、性能、可维护性这些技术层面的因素考虑更多，因而总体来看，还可以说是一个技术比重明显大过业务的项目。

来到亚马逊，换过几个 team，第一个呆的时间比较长的 team 是 Demand Forecasting（销量预测），由于团队比较成熟，组织结构无论是人员上还是代码上，解耦都做得还可以，因而我更关心的是数据的 ETL 过程、schema、版本、可视化等等这些通用而并不耦合业务逻辑的东西。我们当然有业务方面的需求，但是这个 team 的核心还是在数据上面，大量的机器学习内容，不太可能内建太多的业务逻辑，主要影响销量预测还是数据本身。但是这个团队中，我接触了不少领域知识，这是一个比较大的变化，而这部分和预测算法，以及机器学习相关的领域知识，不同于某些典型的纯业务范畴的领域知识（比如说许多医疗领域、金融领域等等），可以说是技术和业务之间的灰色地带——既有技术的部分，也有业务的部分。

接着是 Contribution Profit 这个组，计算成本和盈利。从架构和系统上和大数据更深入地打交道，却基本上没有了机器学习的内容。主要原因在于，成本和盈利情况的计算，并不，或者说基本上不需要机器学习的技术，主要还是一些复杂的统计量化的方法，包括一大堆逻辑纷繁的公式。所以从业务和技术的角度上看，每天既要从系统上和元数据角度去解决那些大数据计算存储方面的问题，又要深挖业务逻辑，尝试去理解一些数值的缘由。加上我们的工具不足够出色，许多本来应该由数据分析师（Data Analyst）来做的工作，被迫转嫁到了程序员工程师的头上。这个角度看，业务逻辑的比重已经非常大了。当时我们组的同事也可以大致上分成两部分，一部分擅长业务，一部分擅长技术。

现在来到 Oracle，在 Storekeeper 组每天的工作包含了云设备（包括 instance 等等）管理，我最初的理解是，应该说工程师主要的贡献应该是提供不同种类的工具，让 Data Center 的技术人员去使用它们来管理。但是，和上面一条的情况类似，工具不足够好用，加之我们算是一个相对比较年轻的团队，还有很多相对混乱的地方，有大量的业务问题需要工程师介入以后才能解决。比方说某些数据的修改，由于工具的缺乏，这些现场的技术人员只能给工程师开 ticket，然后由工程师去更新数据。毫无疑问，这里存在大量的业务逻辑需要厘清，每当新需求分析的时候，通常比技术层面难度更高的是以沟通和梳理业务为主的部分，去和许许多多不同的用户聊，去现场了解情况，去和不同的 team 谈，从而逐步理清思路，了解问题，给出可行的解决方案。我觉得这些事情在一个足够成熟的团队中，是很难遇到的，即是机遇，亦是挑战，很难一刀切谈好坏。

老实说，曾经业务的东西从打心眼里是远不如技术受到我的重视的，再加上我换了那么多领域，我一直觉得只有技术的东西才是持久的，业务的东西却一直在变。但是这样的观点也在慢慢改变。一个是我留意到，有一些同事能够专注于某一领域（比如说 billing 系统，做了几年，换了几个团队，甚至公司，却一直研究账单系统；再比如和我现在打交道的一位 TPM，在亚马逊、微软干过，现在来到 Oracle，都在云计算的最底层处理涉及硬件和设备的需求，考虑到本来云计算就没多少年，在这一块领域，她可以说是非常罕见的老江湖了），这一旦在进一步职业选择的时候，如果选择到了相同的领域，无疑是在经验上有很大优势的。这也促使我在这一次求职的时候所说，希望在几年后的三十五岁的时候，明确一个大致上希望精进的方向。也许未来的新业务难以预测（比如哪怕就在五年前有谁能知道区块链居然能火成这样？），但是有一个大致熟知的领域为根基去伸展枝叶，会比一直没有清晰的门路强。当然，我不觉得之前的各个业务领域的积累是浪费，毕竟，眼界不只取决于深度，还取决于广度。

程序员工程师，毕竟主要做的是工程，不是研究。和生活更紧密，和实际问题更贴近，因而有大量的非技术问题和知识需要把握。入职以后，今年给自己的一个小目标，就是想提高包括沟通和业务理解在内的软实力，一定程度上也是我的短板。业务本身兴许未来能用到，更多的可能是用不到，但是对于业务和技术两条腿走路的多数程序员来说，瘸了哪一条都显得受限许多。
/***********************************************************************************************************************/




